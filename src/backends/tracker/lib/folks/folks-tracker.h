/* folks-tracker.h generated by valac 0.20.1.30-1b1d, the Vala compiler, do not modify */


#ifndef __FOLKS_FOLKS_TRACKER_H__
#define __FOLKS_FOLKS_TRACKER_H__

#include <glib.h>
#include <folks/folks.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>
#include <libtracker-sparql/tracker-sparql.h>
#include <gee.h>
#include <glib-object.h>

G_BEGIN_DECLS


#define TRF_TYPE_PERSONA (trf_persona_get_type ())
#define TRF_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TRF_TYPE_PERSONA, TrfPersona))
#define TRF_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TRF_TYPE_PERSONA, TrfPersonaClass))
#define TRF_IS_PERSONA(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TRF_TYPE_PERSONA))
#define TRF_IS_PERSONA_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TRF_TYPE_PERSONA))
#define TRF_PERSONA_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TRF_TYPE_PERSONA, TrfPersonaClass))

typedef struct _TrfPersona TrfPersona;
typedef struct _TrfPersonaClass TrfPersonaClass;
typedef struct _TrfPersonaPrivate TrfPersonaPrivate;

#define TRF_TYPE_PERSONA_STORE (trf_persona_store_get_type ())
#define TRF_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TRF_TYPE_PERSONA_STORE, TrfPersonaStore))
#define TRF_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TRF_TYPE_PERSONA_STORE, TrfPersonaStoreClass))
#define TRF_IS_PERSONA_STORE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TRF_TYPE_PERSONA_STORE))
#define TRF_IS_PERSONA_STORE_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TRF_TYPE_PERSONA_STORE))
#define TRF_PERSONA_STORE_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TRF_TYPE_PERSONA_STORE, TrfPersonaStoreClass))

typedef struct _TrfPersonaStore TrfPersonaStore;
typedef struct _TrfPersonaStoreClass TrfPersonaStoreClass;
typedef struct _TrfPersonaStorePrivate TrfPersonaStorePrivate;

#define TYPE_EVENT (event_get_type ())
typedef struct _Event Event;

#define TRF_TYPE_ONTOLOGY_DEFS (trf_ontology_defs_get_type ())
#define TRF_ONTOLOGY_DEFS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TRF_TYPE_ONTOLOGY_DEFS, TrfOntologyDefs))
#define TRF_ONTOLOGY_DEFS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TRF_TYPE_ONTOLOGY_DEFS, TrfOntologyDefsClass))
#define TRF_IS_ONTOLOGY_DEFS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TRF_TYPE_ONTOLOGY_DEFS))
#define TRF_IS_ONTOLOGY_DEFS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TRF_TYPE_ONTOLOGY_DEFS))
#define TRF_ONTOLOGY_DEFS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TRF_TYPE_ONTOLOGY_DEFS, TrfOntologyDefsClass))

typedef struct _TrfOntologyDefs TrfOntologyDefs;
typedef struct _TrfOntologyDefsClass TrfOntologyDefsClass;
typedef struct _TrfOntologyDefsPrivate TrfOntologyDefsPrivate;

struct _TrfPersona {
	FolksPersona parent_instance;
	TrfPersonaPrivate * priv;
};

struct _TrfPersonaClass {
	FolksPersonaClass parent_class;
};

struct _TrfPersonaStore {
	FolksPersonaStore parent_instance;
	TrfPersonaStorePrivate * priv;
};

struct _TrfPersonaStoreClass {
	FolksPersonaStoreClass parent_class;
};

struct _Event {
	gint graph_id;
	gint subject_id;
	gint pred_id;
	gint object_id;
};

struct _TrfOntologyDefs {
	GObject parent_instance;
	TrfOntologyDefsPrivate * priv;
};

struct _TrfOntologyDefsClass {
	GObjectClass parent_class;
};


GType trf_persona_get_type (void) G_GNUC_CONST;
GType trf_persona_store_get_type (void) G_GNUC_CONST;
TrfPersona* trf_persona_new (TrfPersonaStore* store, const gchar* tracker_id, TrackerSparqlCursor* cursor);
TrfPersona* trf_persona_construct (GType object_type, TrfPersonaStore* store, const gchar* tracker_id, TrackerSparqlCursor* cursor);
const gchar* trf_persona_get_tracker_id (TrfPersona* self);
TrackerSparqlCursor* trf_persona_get_cursor (TrfPersona* self);
TrfPersonaStore* trf_persona_store_new (void);
TrfPersonaStore* trf_persona_store_construct (GType object_type);
gchar* trf_persona_store_serialize_web_services (GeeMultiMap* ws_obj);
GeeMultiMap* trf_persona_store_unserialize_web_services (const gchar* ws_addrs);
gchar* trf_persona_store_serialize_local_ids (GeeSet* local_ids);
GeeSet* trf_persona_store_unserialize_local_ids (const gchar* local_ids);
gint trf_persona_store_get_favorite_id (TrfPersonaStore* self);
gint trf_persona_store_get_gender_male_id (TrfPersonaStore* self);
gint trf_persona_store_get_gender_female_id (TrfPersonaStore* self);
GType event_get_type (void) G_GNUC_CONST;
Event* event_dup (const Event* self);
void event_free (Event* self);
GType trf_ontology_defs_get_type (void) G_GNUC_CONST;
#define TRF_ONTOLOGY_DEFS_DEFAULT_CONTACT_URN "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#default-conta" \
"ct-me"
#define TRF_ONTOLOGY_DEFS_PERSON_CLASS "http://www.semanticdesktop.org/ontologies/2007/03/22/nco#PersonContact"
#define TRF_ONTOLOGY_DEFS_NCO_FULLNAME "nco:fullname"
#define TRF_ONTOLOGY_DEFS_NCO_FAMILY "nco:nameFamily"
#define TRF_ONTOLOGY_DEFS_NCO_GIVEN "nco:nameGiven"
#define TRF_ONTOLOGY_DEFS_NCO_ADDITIONAL "nco:nameAdditional"
#define TRF_ONTOLOGY_DEFS_NCO_SUFFIX "nco:nameHonorificSuffix"
#define TRF_ONTOLOGY_DEFS_NCO_PREFIX "nco:nameHonorificPrefix"
#define TRF_ONTOLOGY_DEFS_NCO_NICKNAME "nco:nickname"
#define TRF_ONTOLOGY_DEFS_RDF_TYPE "ns:type"
#define TRF_ONTOLOGY_DEFS_NCO_PERSON "nco:PersonContact"
#define TRF_ONTOLOGY_DEFS_NCO_URL "nco:url"
#define TRF_ONTOLOGY_DEFS_NCO_WEBSITE "nco:websiteUrl"
#define TRF_ONTOLOGY_DEFS_NCO_BLOG "nco:blogUrl"
#define TRF_ONTOLOGY_DEFS_NAO_FAVORITE "nao:predefined-tag-favorite"
#define TRF_ONTOLOGY_DEFS_NAO_TAG "nao:hasTag"
#define TRF_ONTOLOGY_DEFS_NAO_PROPERTY "nao:Property"
#define TRF_ONTOLOGY_DEFS_NAO_HAS_PROPERTY "nao:hasProperty"
#define TRF_ONTOLOGY_DEFS_NAO_PROPERTY_NAME "nao:propertyName"
#define TRF_ONTOLOGY_DEFS_NAO_PROPERTY_VALUE "nao:propertyValue"
#define TRF_ONTOLOGY_DEFS_NCO_HAS_EMAIL "nco:hasEmailAddress"
#define TRF_ONTOLOGY_DEFS_NCO_EMAIL "nco:EmailAddress"
#define TRF_ONTOLOGY_DEFS_NCO_EMAIL_PROP "nco:emailAddress"
#define TRF_ONTOLOGY_DEFS_NCO_HAS_PHONE "nco:hasPhoneNumber"
#define TRF_ONTOLOGY_DEFS_NCO_PHONE "nco:PhoneNumber"
#define TRF_ONTOLOGY_DEFS_NCO_PHONE_PROP "nco:phoneNumber"
#define TRF_ONTOLOGY_DEFS_NCO_HAS_AFFILIATION "nco:hasAffiliation"
#define TRF_ONTOLOGY_DEFS_NCO_AFFILIATION "nco:Affiliation"
#define TRF_ONTOLOGY_DEFS_NCO_BIRTHDAY "nco:birthDate"
#define TRF_ONTOLOGY_DEFS_NCO_NOTE "nco:note"
#define TRF_ONTOLOGY_DEFS_NCO_GENDER "nco:gender"
#define TRF_ONTOLOGY_DEFS_NCO_MALE "nco:gender-male"
#define TRF_ONTOLOGY_DEFS_NCO_FEMALE "nco:gender-female"
#define TRF_ONTOLOGY_DEFS_NCO_PHOTO "nco:photo"
#define TRF_ONTOLOGY_DEFS_NIE_URL "nie:url"
#define TRF_ONTOLOGY_DEFS_NFO_IMAGE "nfo:Image"
#define TRF_ONTOLOGY_DEFS_NIE_DATAOBJECT "nie:DataObject"
#define TRF_ONTOLOGY_DEFS_NCO_IMADDRESS "nco:IMAddress"
#define TRF_ONTOLOGY_DEFS_NCO_HAS_IMADDRESS "nco:hasIMAddress"
#define TRF_ONTOLOGY_DEFS_NCO_IMPROTOCOL "nco:imProtocol"
#define TRF_ONTOLOGY_DEFS_NCO_IMID "nco:imID"
#define TRF_ONTOLOGY_DEFS_NCO_IM_NICKNAME "nco:imNickname"
#define TRF_ONTOLOGY_DEFS_NCO_POSTAL_ADDRESS "nco:PostalAddress"
#define TRF_ONTOLOGY_DEFS_NCO_HAS_POSTAL_ADDRESS "nco:hasPostalAddress"
#define TRF_ONTOLOGY_DEFS_NCO_POBOX "nco:pobox"
#define TRF_ONTOLOGY_DEFS_NCO_DISTRICT "nco:district"
#define TRF_ONTOLOGY_DEFS_NCO_COUNTY "nco:county"
#define TRF_ONTOLOGY_DEFS_NCO_LOCALITY "nco:locality"
#define TRF_ONTOLOGY_DEFS_NCO_POSTALCODE "nco:postalcode"
#define TRF_ONTOLOGY_DEFS_NCO_STREET_ADDRESS "nco:streetAddress"
#define TRF_ONTOLOGY_DEFS_NCO_ADDRESS_LOCATION "nco:addressLocation"
#define TRF_ONTOLOGY_DEFS_NCO_EXTENDED_ADDRESS "nco:extendedAddress"
#define TRF_ONTOLOGY_DEFS_NCO_COUNTRY "nco:country"
#define TRF_ONTOLOGY_DEFS_NCO_REGION "nco:region"
#define TRF_ONTOLOGY_DEFS_NCO_ROLE "nco:role"
#define TRF_ONTOLOGY_DEFS_NCO_TITLE "nco:title"
#define TRF_ONTOLOGY_DEFS_NCO_ORG "nco:org"
#define TRF_ONTOLOGY_DEFS_NCO_URL_PREFIX "<http://www.semanticdesktop.org/ontologies/2007/03/22/"
#define TRF_ONTOLOGY_DEFS_NAO_URL_PREFIX "<http://www.semanticdesktop.org/ontologies/2007/08/15/"
#define TRF_ONTOLOGY_DEFS_RDF_URL_PREFIX "<http://www.w3.org/1999/02/"
TrfOntologyDefs* trf_ontology_defs_new (void);
TrfOntologyDefs* trf_ontology_defs_construct (GType object_type);


G_END_DECLS

#endif
