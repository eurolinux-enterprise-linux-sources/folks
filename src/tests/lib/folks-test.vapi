/* folks-test.vapi generated by valac 0.20.1.30-1b1d, do not modify. */

namespace Folks {
	[CCode (cheader_filename = "folks-test.h")]
	public abstract class TestCase : GLib.Object {
		public delegate void TestMethod ();
		public GLib.TestDBus? test_dbus;
		public TestCase (string name);
		public void add_test (string name, Folks.TestCase.TestMethod test);
		public virtual string? create_transient_dir ();
		public virtual void final_tear_down ();
		public virtual void private_bus_up ();
		public void register ();
		public virtual void set_up ();
		public virtual void tear_down ();
		public string transient_dir { get; }
		public virtual bool uses_dbus_1 { get; }
	}
	[CCode (cheader_filename = "folks-test.h")]
	public class TestUtils {
		public TestUtils ();
		public static async void aggregator_prepare_and_wait_for_quiescence (Folks.IndividualAggregator aggregator) throws GLib.Error;
		public static async void backend_prepare_and_wait_for_quiescence (Folks.Backend backend) throws GLib.Error;
		public static string get_built_test_data (string filename);
		public static string get_source_test_data (string filename);
		public static async bool loadable_icons_content_equal (GLib.LoadableIcon a, GLib.LoadableIcon b, int icon_size);
		[Deprecated (replacement = "loop_run_with_timeout")]
		public static void loop_run_with_non_fatal_timeout (GLib.MainLoop loop, int timeout = 3);
		public static void loop_run_with_timeout (GLib.MainLoop loop, int timeout = 5);
		public static int multiply_timeout (int timeout);
		[CCode (cheader_filename = "haze-remove-directory.h", cname = "haze_remove_directory")]
		public static bool remove_directory_recursively (string path);
		public static void run_test_helper_sync (string[] argv, out string capture_stdout = null) throws GLib.Error;
	}
}
