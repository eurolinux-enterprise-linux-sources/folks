/* folks-test.vapi generated by valac 0.29.3.10-b87a, do not modify. */

[CCode (gir_namespace = "Folks", gir_version = "0.6")]
namespace Folks {
	[CCode (cheader_filename = "folks-test.h")]
	public class DisconnectionQueue : GLib.Object {
		public DisconnectionQueue ();
		public void drain ();
		public void push (GLib.Object obj, ulong id);
	}
	[CCode (cheader_filename = "folks-test.h")]
	public abstract class TestCase : GLib.Object {
		public delegate void TestMethod ();
		public static bool in_final_tear_down;
		public Folks.TestDBus? test_dbus;
		public Folks.TestDBus? test_system_dbus;
		public TestCase (string name);
		public void add_test (string name, owned Folks.TestCase.TestMethod test);
		public void create_dbusmock_service (GLib.BusType bus_type, string bus_name, string dbusmock_template_name);
		public virtual string create_transient_dir ();
		public virtual void final_tear_down ();
		public virtual void private_bus_up ();
		public void register ();
		public virtual void set_up ();
		public virtual void tear_down ();
		public string transient_dir { get; }
		public virtual bool uses_dbus_1 { get; }
	}
	[CCode (cheader_filename = "folks-test.h")]
	public class TestUtils {
		public TestUtils ();
		public static async void aggregator_prepare_and_wait_for_individuals (Folks.IndividualAggregator aggregator, string[] expected_persona_names) throws GLib.Error;
		public static void aggregator_prepare_and_wait_for_individuals_sync_with_timeout (Folks.IndividualAggregator aggregator, string[] expected_persona_names, int timeout = 5);
		public static async void aggregator_prepare_and_wait_for_quiescence (Folks.IndividualAggregator aggregator) throws GLib.Error;
		public static async void aggregator_wait_for_individuals (Folks.IndividualAggregator aggregator, string[] expected_added_persona_names, string[] expected_removed_persona_names);
		public static async void backend_prepare_and_wait_for_quiescence (Folks.Backend backend) throws GLib.Error;
		public static string get_built_test_data (string filename);
		public static Folks.Individual get_individual_by_name (Folks.IndividualAggregator aggregator, string full_name);
		public static string get_source_test_data (string filename);
		public static async bool loadable_icons_content_equal (GLib.LoadableIcon a, GLib.LoadableIcon b, int icon_size);
		[Deprecated (replacement = "loop_run_with_timeout")]
		public static void loop_run_with_non_fatal_timeout (GLib.MainLoop loop, int timeout = 3);
		public static void loop_run_with_timeout (GLib.MainLoop loop, int timeout = 5);
		public static bool main_context_is_empty (GLib.MainContext? context = null);
		public static int multiply_timeout (int timeout);
		[CCode (cheader_filename = "haze-remove-directory.h", cname = "haze_remove_directory")]
		public static bool remove_directory_recursively (string path);
		public static void run_test_helper_sync (string[] argv, out string capture_stdout = null) throws GLib.Error;
	}
}
namespace org {
	namespace freedesktop {
		namespace DBus {
			[CCode (cheader_filename = "folks-test.h")]
			[DBus (name = "org.freedesktop.DBus.Mock")]
			public interface Mock : GLib.Object {
				public struct Call {
					public uint64 call_time;
					public string method_name;
					public GLib.Variant[] args;
				}
				public struct Method {
					public string name;
					public string in_sig;
					public string out_sig;
				}
				public struct MethodCall {
					public uint64 call_time;
					public GLib.Variant[] args;
				}
				[DBus (name = "AddMethod")]
				public abstract void add_method (string interface_name, string name, string in_sig, string out_sig, string code) throws GLib.IOError;
				[DBus (name = "AddMethods")]
				public abstract void add_methods (string interface_name, org.freedesktop.DBus.Mock.Method[] methods) throws GLib.IOError;
				[DBus (name = "AddObject")]
				public abstract void add_object (string path, string interface_name, GLib.HashTable<string,GLib.Variant> properties, org.freedesktop.DBus.Mock.Method[] methods) throws GLib.IOError;
				[DBus (name = "AddProperties")]
				public abstract void add_properties (string interface_name, GLib.HashTable<string,GLib.Variant> properties) throws GLib.IOError;
				[DBus (name = "AddProperty")]
				public abstract void add_property (string interface_name, string name, GLib.Variant val) throws GLib.IOError;
				[DBus (name = "AddTemplate")]
				public abstract void add_template (string template_name, GLib.HashTable<string,GLib.Variant> template_params) throws GLib.IOError;
				[DBus (name = "ClearCalls")]
				public abstract void clear_calls () throws GLib.IOError;
				[DBus (name = "EmitSignal")]
				public abstract void emit_signal (string interface_name, string name, string signature, GLib.Variant[] args) throws GLib.IOError;
				[DBus (name = "GetCalls")]
				public abstract org.freedesktop.DBus.Mock.Call[] get_calls () throws GLib.IOError;
				[DBus (name = "GetMethodCalls")]
				public abstract org.freedesktop.DBus.Mock.MethodCall[] get_method_calls (string method) throws GLib.IOError;
				[DBus (name = "RemoveObject")]
				public abstract void remove_object (string path) throws GLib.IOError;
				[DBus (name = "Reset")]
				public abstract void reset () throws GLib.IOError;
				[DBus (name = "MethodCalled")]
				public signal void method_called (string method_name, GLib.Variant[] args);
			}
		}
	}
}
